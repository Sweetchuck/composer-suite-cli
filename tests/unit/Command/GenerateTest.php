<?php

declare(strict_types = 1);

namespace Sweetchuck\ComposerSuiteCli\Tests\Unit\Command;

use Codeception\Test\Unit;
use org\bovigo\vfs\vfsStream;
use Sweetchuck\ComposerSuiteCli\Application;
use Sweetchuck\ComposerSuiteCli\Tests\UnitTester;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Tester\CommandTester;

/**
 * @covers \Sweetchuck\ComposerSuiteCli\Command\Generate
 */
class GenerateTest extends Unit
{
    protected UnitTester $tester;

    public function testGenerateSuccess(): void
    {
        $vfsRoot = vfsStream::setup(
            __FUNCTION__,
            null,
            [
                'composer.json' => json_encode([
                    'require' => [
                        'a/b' => '^1.0',
                    ],
                    'extra' => [
                        'composer-suite' => [
                            'one' => [
                                'actions' => [
                                    [
                                        'type' => 'replaceRecursive',
                                        'config' => [
                                            'parents' => [],
                                            'items' => [
                                                'require' => [
                                                    'a/b' => '1.x-dev',
                                                ],
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                            'two' => [
                                'actions' => [
                                    [
                                        'type' => 'replaceRecursive',
                                        'config' => [
                                            'parents' => [],
                                            'items' => [
                                                'require' => [
                                                    'a/b' => '1.x-dev',
                                                ],
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                            'three' => [
                                'actions' => [
                                    [
                                        'type' => 'replaceRecursive',
                                        'config' => [
                                            'parents' => [],
                                            'items' => [
                                                'require' => [
                                                    'a/b' => '1.x-dev',
                                                ],
                                            ],
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ]),
                'composer.one.json' => implode("\n", [
                    '{',
                    '    "require": {',
                    '        "a/b": "1.x-dev"',
                    '    },',
                    '    "extra": []',
                    '}',
                    '',
                ]),
                'composer.three.json' => implode("\n", [
                    '{',
                    '    "foo": "bar",',
                    '    "require": {',
                    '        "a/b": "1.x-dev"',
                    '    },',
                    '    "extra": []',
                    '}',
                    '',
                ]),
            ],
        );

        $application = new Application();
        $application->initialize();
        $command = $application->find('generate');
        $command->setApplication($application);
        $commandTester = new CommandTester($command);
        $commandTester->execute(
            [
                'working-directory' => $vfsRoot->url(),
            ],
            [
                'decorated' => false,
                'verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE,
            ],
        );

        // @todo Somehow get the output, and check its content.
        $expectedExitCode = 0;
        $this->tester->assertSame(
            $expectedExitCode,
            $commandTester->getStatusCode(),
            "exit code $expectedExitCode",
        );

        $comment = 'DO NOT EDIT THIS FILE. Content of this file can be overwritten by the `suite:generate` command.';

        $this->tester->assertStringEqualsFile(
            $vfsRoot->url() . '/composer.one.json',
            implode("\n", [
                '{',
                '    "_comment": [',
                "        \"$comment\"",
                '    ],',
                '    "require": {',
                '        "a/b": "1.x-dev"',
                '    },',
                '    "extra": []',
                '}',
                '',
            ]),
        );
    }

    public function testGenerateFail(): void
    {
        $vfsRoot = vfsStream::setup(
            __FUNCTION__,
            null,
            [
                'composer.json' => json_encode([
                    'require' => [
                        'a/b' => '^1.0',
                    ],
                    'extra' => [
                        'composer-suite' => [
                            'one' => [
                                'actions' => [
                                    [
                                        'type' => 'sortNormal',
                                        'config' => [
                                            'parents' => [],
                                            'function' => 'not_valid',
                                        ],
                                    ],
                                ],
                            ],
                        ],
                    ],
                ]),
            ],
        );

        $application = new Application();
        $application->initialize();
        $command = $application->find('generate');
        $command->setApplication($application);
        $commandTester = new CommandTester($command);
        $commandTester->execute(
            [
                'working-directory' => $vfsRoot->url(),
            ],
            [
                'verbosity' => OutputInterface::VERBOSITY_VERY_VERBOSE,
            ],
        );

        $expectedExitCode = 1;
        $this->tester->assertSame(
            $expectedExitCode,
            $commandTester->getStatusCode(),
            "exit code $expectedExitCode",
        );

        $this->tester->assertFileDoesNotExist($vfsRoot->url() . '/composer.one.json');
    }
}
